plugins {
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.github.chanani'
version = '1.0.2'

application {
    mainClass = 'com.reviewer.ClaudeReviewerApplication'
}

repositories {
    mavenCentral()
}

dependencies {
    // GitHub API
    api 'org.kohsuke:github-api:1.319'

    // HTTP Client
    api 'com.squareup.okhttp3:okhttp:4.12.0'

    // JSON
    api 'com.google.code.gson:gson:2.10.1'

    // Lombok (보일러플레이트 코드 제거)
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Claude PR Reviewer'
                description = 'A library for automated code review using Claude AI'
                url = 'https://github.com/chanani/claude-pr-reviewer'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'chanani'
                        name = 'chanhan-id'
                        email = 'theholidaynight@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/chanani/claude-reviewer.git'
                    developerConnection = 'scm:git:ssh://github.com/chanani/claude-reviewer.git'
                    url = 'https://github.com/chanani/claude-pr-reviewer'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    // 로컬 개발: GPG 에이전트 사용 (GPG 2.1+)
    // GitHub Actions: 레거시 방식 (secring.gpg)
    def signingKey = project.findProperty("signing.keyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingPassword = project.findProperty("signing.password") ?: System.getenv("SIGNING_PASSWORD")

    if (signingKey && signingPassword) {
        // GitHub Actions에서 실행 (secring.gpg 방식)
        def signingKeyRingFile = project.findProperty("signing.secretKeyRingFile") ?: System.getenv("SIGNING_KEY_RING_FILE")
        if (signingKeyRingFile) {
            // 레거시 방식
            useInMemoryPgpKeys(signingKey, new File(signingKeyRingFile).text, signingPassword)
        }
    } else if (project.hasProperty("signing.gnupg.keyName")) {
        // 로컬 개발 (GPG 에이전트 방식)
        useGpgCmd()
    }

    sign publishing.publications.mavenJava
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
